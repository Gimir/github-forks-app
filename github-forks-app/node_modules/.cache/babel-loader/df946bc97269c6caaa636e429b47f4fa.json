{"ast":null,"code":"import _slicedToArray from \"/home/abbas/jsPractice/tasks/task-forks/github-forks-app/github-forks-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/abbas/jsPractice/tasks/task-forks/github-forks-app/github-forks-app/src/components/HeaderContainer.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { setRequestData } from '../actionCreators/requestData';\nimport SearchField from './SearchField';\n\nconst HeaderContainer = ({\n  setDataForFetching,\n  history\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputValue = _useState2[0],\n        setInputValue = _useState2[1];\n\n  const onBtnClick = () => {\n    const _inputValue$split = inputValue.split('/'),\n          _inputValue$split2 = _slicedToArray(_inputValue$split, 2),\n          owner = _inputValue$split2[0],\n          repo = _inputValue$split2[1];\n\n    setDataForFetching(owner, repo, 1);\n    history.push(`/search/${owner}/${repo}/1`);\n  };\n\n  const onInputChange = e => {\n    const value = e.target.value;\n    setInputValue(value);\n  };\n\n  return React.createElement(SearchField, {\n    onBtnClick: onBtnClick,\n    onInputChange: onInputChange,\n    inputValue: inputValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setDataForFetching: (owner, repo, page) => dispatch(setRequestData(owner, repo, page))\n});\n\nexport default withRouter(connect(null, mapDispatchToProps)(HeaderContainer));","map":{"version":3,"sources":["/home/abbas/jsPractice/tasks/task-forks/github-forks-app/github-forks-app/src/components/HeaderContainer.js"],"names":["React","useState","connect","withRouter","setRequestData","SearchField","HeaderContainer","setDataForFetching","history","inputValue","setInputValue","onBtnClick","split","owner","repo","push","onInputChange","e","value","target","mapDispatchToProps","dispatch","page"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,cAAT,QAA+B,+BAA/B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;AAGA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA,kBAAD;AAAqBC,EAAAA;AAArB,CAAD,KAAmC;AAAA,oBACnBP,QAAQ,CAAC,EAAD,CADW;AAAA;AAAA,QAChDQ,UADgD;AAAA,QACpCC,aADoC;;AAGvD,QAAMC,UAAU,GAAG,MAAM;AAAA,8BACCF,UAAU,CAACG,KAAX,CAAiB,GAAjB,CADD;AAAA;AAAA,UACdC,KADc;AAAA,UACPC,IADO;;AAErBP,IAAAA,kBAAkB,CAACM,KAAD,EAAQC,IAAR,EAAc,CAAd,CAAlB;AACAN,IAAAA,OAAO,CAACO,IAAR,CAAc,WAAUF,KAAM,IAAGC,IAAK,IAAtC;AACH,GAJD;;AAKA,QAAME,aAAa,GAAGC,CAAC,IAAI;AAAA,UACfC,KADe,GACLD,CAAC,CAACE,MADG,CACfD,KADe;AAEvBR,IAAAA,aAAa,CAACQ,KAAD,CAAb;AACH,GAHD;;AAIA,SACI,oBAAC,WAAD;AAAa,IAAA,UAAU,EAAEP,UAAzB;AAAqC,IAAA,aAAa,EAAEK,aAApD;AAAmE,IAAA,UAAU,EAAEP,UAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAfD;;AAiBA,MAAMW,kBAAkB,GAAGC,QAAQ,KAAK;AACpCd,EAAAA,kBAAkB,EAAE,CAACM,KAAD,EAAQC,IAAR,EAAcQ,IAAd,KAAuBD,QAAQ,CAACjB,cAAc,CAACS,KAAD,EAAQC,IAAR,EAAcQ,IAAd,CAAf;AADf,CAAL,CAAnC;;AAIA,eAAenB,UAAU,CAACD,OAAO,CAC7B,IAD6B,EAE7BkB,kBAF6B,CAAP,CAGxBd,eAHwB,CAAD,CAAzB","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { setRequestData } from '../actionCreators/requestData';\n\nimport SearchField from './SearchField';\n\n\nconst HeaderContainer = ({setDataForFetching, history}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const onBtnClick = () => {\n        const [owner, repo] = inputValue.split('/');\n        setDataForFetching(owner, repo, 1);\n        history.push(`/search/${owner}/${repo}/1`);\n    };\n    const onInputChange = e => {\n        const { value } = e.target;\n        setInputValue(value);\n    }\n    return (\n        <SearchField onBtnClick={onBtnClick} onInputChange={onInputChange} inputValue={inputValue} />\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setDataForFetching: (owner, repo, page) => dispatch(setRequestData(owner, repo, page))\n});\n\nexport default withRouter(connect(\n    null,\n    mapDispatchToProps\n)(HeaderContainer));"]},"metadata":{},"sourceType":"module"}