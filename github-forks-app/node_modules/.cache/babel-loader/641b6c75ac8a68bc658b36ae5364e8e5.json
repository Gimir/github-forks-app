{"ast":null,"code":"import axios from 'axios';\nimport { SET_FORKS } from '../constants/actions';\nimport { startLoading, stopLoadingSuccess, stopLoadingError } from './fetchStatus';\nconst ENDPOINT = 'https://api.github.com'; //user/repos?page=2&per_page=100\n\nexport const setForks = forks => ({\n  type: SET_FORKS,\n  payload: forks\n});\nexport const fetchForks = (owner, repository, page) => {\n  return dispatch => {\n    dispatch(startLoading());\n    axios.get(`${ENDPOINT}/repos/${owner}/${repository}/forks?page=${page}&per_page=10`).then(res => {\n      dispatch(stopLoadingSuccess());\n      const forks = res.data.map(fork => {\n        const id = fork.id,\n              full_name = fork.full_name,\n              stargazers_count = fork.stargazers_count,\n              clone_url = fork.clone_url,\n              login = fork.login;\n        return {\n          id,\n          login,\n          repositoryName: full_name,\n          stars: stargazers_count,\n          url: clone_url\n        };\n      });\n      dispatch(setForks(forks));\n    }).catch(err => {\n      dispatch(stopLoadingError(err.message));\n      dispatch(setForks([]));\n    });\n  };\n};","map":{"version":3,"sources":["/home/abbas/jsPractice/tasks/task-forks/github-forks-app/github-forks-app/src/actionCreators/forks.js"],"names":["axios","SET_FORKS","startLoading","stopLoadingSuccess","stopLoadingError","ENDPOINT","setForks","forks","type","payload","fetchForks","owner","repository","page","dispatch","get","then","res","data","map","fork","id","full_name","stargazers_count","clone_url","login","repositoryName","stars","url","catch","err","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,YAAT,EAAuBC,kBAAvB,EAA2CC,gBAA3C,QAAmE,eAAnE;AAEA,MAAMC,QAAQ,GAAG,wBAAjB,C,CACA;;AAGA,OAAO,MAAMC,QAAQ,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,IAAI,EAAEP,SADwB;AAE9BQ,EAAAA,OAAO,EAAEF;AAFqB,CAAL,CAAtB;AAMP,OAAO,MAAMG,UAAU,GAAG,CAACC,KAAD,EAAQC,UAAR,EAAoBC,IAApB,KAA6B;AACnD,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACZ,YAAY,EAAb,CAAR;AAEAF,IAAAA,KAAK,CACAe,GADL,CACU,GAAEV,QAAS,UAASM,KAAM,IAAGC,UAAW,eAAcC,IAAK,cADrE,EAEKG,IAFL,CAEUC,GAAG,IAAI;AACTH,MAAAA,QAAQ,CAACX,kBAAkB,EAAnB,CAAR;AAEA,YAAMI,KAAK,GAAGU,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAaC,IAAI,IAAI;AAAA,cAE3BC,EAF2B,GAO3BD,IAP2B,CAE3BC,EAF2B;AAAA,cAG3BC,SAH2B,GAO3BF,IAP2B,CAG3BE,SAH2B;AAAA,cAI3BC,gBAJ2B,GAO3BH,IAP2B,CAI3BG,gBAJ2B;AAAA,cAK3BC,SAL2B,GAO3BJ,IAP2B,CAK3BI,SAL2B;AAAA,cAM3BC,KAN2B,GAO3BL,IAP2B,CAM3BK,KAN2B;AAS/B,eAAO;AACHJ,UAAAA,EADG;AAEHI,UAAAA,KAFG;AAGHC,UAAAA,cAAc,EAAEJ,SAHb;AAIHK,UAAAA,KAAK,EAAEJ,gBAJJ;AAKHK,UAAAA,GAAG,EAAEJ;AALF,SAAP;AAOH,OAhBa,CAAd;AAkBAV,MAAAA,QAAQ,CAACR,QAAQ,CAACC,KAAD,CAAT,CAAR;AACH,KAxBL,EAyBKsB,KAzBL,CAyBWC,GAAG,IAAI;AACVhB,MAAAA,QAAQ,CAACV,gBAAgB,CAAC0B,GAAG,CAACC,OAAL,CAAjB,CAAR;AACAjB,MAAAA,QAAQ,CAACR,QAAQ,CAAC,EAAD,CAAT,CAAR;AACH,KA5BL;AA6BH,GAhCD;AAiCH,CAlCM","sourcesContent":["import axios from 'axios';\nimport { SET_FORKS } from '../constants/actions';\nimport { startLoading, stopLoadingSuccess, stopLoadingError } from './fetchStatus';\n\nconst ENDPOINT = 'https://api.github.com';\n//user/repos?page=2&per_page=100\n\n\nexport const setForks = forks => ({\n    type: SET_FORKS,\n    payload: forks\n});\n\n\nexport const fetchForks = (owner, repository, page) => {\n    return dispatch => {\n        dispatch(startLoading());\n\n        axios\n            .get(`${ENDPOINT}/repos/${owner}/${repository}/forks?page=${page}&per_page=10`)\n            .then(res => {\n                dispatch(stopLoadingSuccess());\n                \n                const forks = res.data.map(fork => {\n                    const { \n                        id,\n                        full_name, \n                        stargazers_count,\n                        clone_url,\n                        login,\n                    } = fork;\n\n                    return {\n                        id,\n                        login,\n                        repositoryName: full_name,\n                        stars: stargazers_count,\n                        url: clone_url,\n                    };\n                });\n\n                dispatch(setForks(forks));\n            })\n            .catch(err => {\n                dispatch(stopLoadingError(err.message));\n                dispatch(setForks([]));\n            });\n    };\n};"]},"metadata":{},"sourceType":"module"}