{"ast":null,"code":"import axios from 'axios';\nimport { SET_FORKS } from '../constants/actions';\nimport { startLoading, stopLoading } from './onLoad';\nconst ENDPOINT = 'https://api.github.com'; //user/repos?page=2&per_page=100\n\nexport const setForks = forks => ({\n  type: SET_FORKS,\n  payload: forks\n});\nexport const fetchForks = (owner, repository, page) => {\n  return dispatch => {\n    dispatch(startLoading());\n    axios.get(`${ENDPOINT}/repos/${owner}/${repository}/forks?page=${page}&per_page=10`).then(res => {\n      dispatch(stopLoading());\n      const forks = res.data.map(fork => {\n        const id = fork.id,\n              full_name = fork.full_name,\n              stargazers_count = fork.stargazers_count,\n              clone_url = fork.clone_url,\n              _fork$owner = fork.owner,\n              login = _fork$owner.login,\n              avatar_url = _fork$owner.avatar_url;\n        return {\n          id,\n          author: {\n            login,\n            avatar_url\n          },\n          repositoryName: full_name,\n          stars: stargazers_count,\n          url: clone_url\n        };\n      });\n      dispatch(setForks(forks));\n    }).catch(err => {\n      dispatch(stopLoading());\n      dispatch(setForks([]));\n      alert('Request has not completed!');\n      console.log(err.message);\n    });\n  };\n};","map":{"version":3,"sources":["/home/abbas/jsPractice/tasks/task-forks/github-forks-app/github-forks-app/src/actionCreators/forks.js"],"names":["axios","SET_FORKS","startLoading","stopLoading","ENDPOINT","setForks","forks","type","payload","fetchForks","owner","repository","page","dispatch","get","then","res","data","map","fork","id","full_name","stargazers_count","clone_url","login","avatar_url","author","repositoryName","stars","url","catch","err","alert","console","log","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,UAA1C;AAEA,MAAMC,QAAQ,GAAG,wBAAjB,C,CACA;;AAGA,OAAO,MAAMC,QAAQ,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,IAAI,EAAEN,SADwB;AAE9BO,EAAAA,OAAO,EAAEF;AAFqB,CAAL,CAAtB;AAMP,OAAO,MAAMG,UAAU,GAAG,CAACC,KAAD,EAAQC,UAAR,EAAoBC,IAApB,KAA6B;AACnD,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACX,YAAY,EAAb,CAAR;AAEAF,IAAAA,KAAK,CACAc,GADL,CACU,GAAEV,QAAS,UAASM,KAAM,IAAGC,UAAW,eAAcC,IAAK,cADrE,EAEKG,IAFL,CAEUC,GAAG,IAAI;AACTH,MAAAA,QAAQ,CAACV,WAAW,EAAZ,CAAR;AAEA,YAAMG,KAAK,GAAGU,GAAG,CAACC,IAAJ,CAASC,GAAT,CAAaC,IAAI,IAAI;AAAA,cAE3BC,EAF2B,GAU3BD,IAV2B,CAE3BC,EAF2B;AAAA,cAG3BC,SAH2B,GAU3BF,IAV2B,CAG3BE,SAH2B;AAAA,cAI3BC,gBAJ2B,GAU3BH,IAV2B,CAI3BG,gBAJ2B;AAAA,cAK3BC,SAL2B,GAU3BJ,IAV2B,CAK3BI,SAL2B;AAAA,4BAU3BJ,IAV2B,CAM3BT,KAN2B;AAAA,cAOvBc,KAPuB,eAOvBA,KAPuB;AAAA,cAQvBC,UARuB,eAQvBA,UARuB;AAY/B,eAAO;AACHL,UAAAA,EADG;AAEHM,UAAAA,MAAM,EAAE;AACJF,YAAAA,KADI;AAEJC,YAAAA;AAFI,WAFL;AAMHE,UAAAA,cAAc,EAAEN,SANb;AAOHO,UAAAA,KAAK,EAAEN,gBAPJ;AAQHO,UAAAA,GAAG,EAAEN;AARF,SAAP;AAUH,OAtBa,CAAd;AAwBAV,MAAAA,QAAQ,CAACR,QAAQ,CAACC,KAAD,CAAT,CAAR;AACH,KA9BL,EA+BKwB,KA/BL,CA+BWC,GAAG,IAAI;AACVlB,MAAAA,QAAQ,CAACV,WAAW,EAAZ,CAAR;AACAU,MAAAA,QAAQ,CAACR,QAAQ,CAAC,EAAD,CAAT,CAAR;AACA2B,MAAAA,KAAK,CAAC,4BAAD,CAAL;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,OAAhB;AACH,KApCL;AAqCH,GAxCD;AAyCH,CA1CM","sourcesContent":["import axios from 'axios';\nimport { SET_FORKS } from '../constants/actions';\nimport { startLoading, stopLoading } from './onLoad';\n\nconst ENDPOINT = 'https://api.github.com';\n//user/repos?page=2&per_page=100\n\n\nexport const setForks = forks => ({\n    type: SET_FORKS,\n    payload: forks\n});\n\n\nexport const fetchForks = (owner, repository, page) => {\n    return dispatch => {\n        dispatch(startLoading());\n\n        axios\n            .get(`${ENDPOINT}/repos/${owner}/${repository}/forks?page=${page}&per_page=10`)\n            .then(res => {\n                dispatch(stopLoading());\n                \n                const forks = res.data.map(fork => {\n                    const { \n                        id,\n                        full_name, \n                        stargazers_count,\n                        clone_url,\n                        owner: {\n                            login,\n                            avatar_url\n                        }, \n                    } = fork;\n\n                    return {\n                        id,\n                        author: {\n                            login,\n                            avatar_url,\n                        },\n                        repositoryName: full_name,\n                        stars: stargazers_count,\n                        url: clone_url,\n                    };\n                });\n\n                dispatch(setForks(forks));\n            })\n            .catch(err => {\n                dispatch(stopLoading());\n                dispatch(setForks([]));\n                alert('Request has not completed!');\n                console.log(err.message);\n            });\n    };\n};"]},"metadata":{},"sourceType":"module"}