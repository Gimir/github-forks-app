{"ast":null,"code":"import _slicedToArray from\"/home/abbas/jsPractice/tasks/task-forks/github-forks-app/github-forks-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{connect}from'react-redux';import{withRouter}from'react-router-dom';import{setRequestData}from'../actionCreators/requestData';import SearchField from'./SearchField';var HeaderContainer=function HeaderContainer(_ref){var setDataForFetching=_ref.setDataForFetching,history=_ref.history;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),inputValue=_useState2[0],setInputValue=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),invalidInput=_useState4[0],setInvalidInput=_useState4[1];var onBtnClick=function onBtnClick(){var inputValidator=new RegExp(/^([a-z0-9]|[a-z0-9](-(?!-)|[a-z0-9]){0,37}[a-z0-9])\\/[a-z0-9-]{1,39}$/i);if(inputValidator.test(inputValue)){var _inputValue$split=inputValue.split('/'),_inputValue$split2=_slicedToArray(_inputValue$split,2),owner=_inputValue$split2[0],repo=_inputValue$split2[1];setDataForFetching(owner,repo,1);history.push(\"/search/\".concat(owner,\"/\").concat(repo,\"/1\"));setInvalidInput(false);setInputValue('');}else{setInvalidInput(true);alert('The search query must be \"owner/repository\"');}};var onInputChange=function onInputChange(e){var value=e.target.value;setInputValue(value);};return React.createElement(SearchField,{onBtnClick:onBtnClick,onInputChange:onInputChange,inputValue:inputValue,invalidInput:invalidInput});};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{setDataForFetching:function setDataForFetching(owner,repo,page){return dispatch(setRequestData(owner,repo,page));}};};export default withRouter(connect(null,mapDispatchToProps)(HeaderContainer));","map":{"version":3,"sources":["/home/abbas/jsPractice/tasks/task-forks/github-forks-app/github-forks-app/src/components/HeaderContainer.js"],"names":["React","useState","connect","withRouter","setRequestData","SearchField","HeaderContainer","setDataForFetching","history","inputValue","setInputValue","invalidInput","setInvalidInput","onBtnClick","inputValidator","RegExp","test","split","owner","repo","push","alert","onInputChange","e","value","target","mapDispatchToProps","dispatch","page"],"mappings":"4JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,UAAT,KAA2B,kBAA3B,CACA,OAASC,cAAT,KAA+B,+BAA/B,CAEA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CAGA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAAmC,IAAjCC,CAAAA,kBAAiC,MAAjCA,kBAAiC,CAAbC,OAAa,MAAbA,OAAa,eACnBP,QAAQ,CAAC,EAAD,CADW,wCAChDQ,UADgD,eACpCC,aADoC,8BAEfT,QAAQ,CAAC,KAAD,CAFO,yCAEhDU,YAFgD,eAElCC,eAFkC,eAIvD,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACrB,GAAMC,CAAAA,cAAc,CAAG,GAAIC,CAAAA,MAAJ,CAAW,wEAAX,CAAvB,CACA,GAAID,cAAc,CAACE,IAAf,CAAoBP,UAApB,CAAJ,CAAqC,uBACXA,UAAU,CAACQ,KAAX,CAAiB,GAAjB,CADW,wDAC1BC,KAD0B,uBACnBC,IADmB,uBAEjCZ,kBAAkB,CAACW,KAAD,CAAQC,IAAR,CAAc,CAAd,CAAlB,CACAX,OAAO,CAACY,IAAR,mBAAwBF,KAAxB,aAAiCC,IAAjC,QACAP,eAAe,CAAC,KAAD,CAAf,CACAF,aAAa,CAAC,EAAD,CAAb,CACH,CAND,IAOK,CACDE,eAAe,CAAC,IAAD,CAAf,CACAS,KAAK,CAAC,6CAAD,CAAL,CACH,CAEJ,CAdD,CAgBA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,CAAC,CAAI,IACfC,CAAAA,KADe,CACLD,CAAC,CAACE,MADG,CACfD,KADe,CAEvBd,aAAa,CAACc,KAAD,CAAb,CACH,CAHD,CAKA,MACI,qBAAC,WAAD,EACI,UAAU,CAAEX,UADhB,CAEI,aAAa,CAAES,aAFnB,CAGI,UAAU,CAAEb,UAHhB,CAII,YAAY,CAAEE,YAJlB,EADJ,CAQH,CAjCD,CAmCA,GAAMe,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,QAAK,CACpCpB,kBAAkB,CAAE,4BAACW,KAAD,CAAQC,IAAR,CAAcS,IAAd,QAAuBD,CAAAA,QAAQ,CAACvB,cAAc,CAACc,KAAD,CAAQC,IAAR,CAAcS,IAAd,CAAf,CAA/B,EADgB,CAAL,EAAnC,CAIA,cAAezB,CAAAA,UAAU,CAACD,OAAO,CAC7B,IAD6B,CAE7BwB,kBAF6B,CAAP,CAGxBpB,eAHwB,CAAD,CAAzB","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { setRequestData } from '../actionCreators/requestData';\n\nimport SearchField from './SearchField';\n\n\nconst HeaderContainer = ({setDataForFetching, history}) => {\n    const [inputValue, setInputValue] = useState('');\n    const [invalidInput, setInvalidInput] = useState(false);\n\n    const onBtnClick = () => {\n        const inputValidator = new RegExp(/^([a-z0-9]|[a-z0-9](-(?!-)|[a-z0-9]){0,37}[a-z0-9])\\/[a-z0-9-]{1,39}$/i);\n        if (inputValidator.test(inputValue)) {\n            const [owner, repo] = inputValue.split('/');\n            setDataForFetching(owner, repo, 1);\n            history.push(`/search/${owner}/${repo}/1`);\n            setInvalidInput(false);\n            setInputValue('');\n        }\n        else {\n            setInvalidInput(true);\n            alert('The search query must be \"owner/repository\"');\n        }\n        \n    };\n\n    const onInputChange = e => {\n        const { value } = e.target;\n        setInputValue(value);\n    }\n    \n    return (\n        <SearchField \n            onBtnClick={onBtnClick} \n            onInputChange={onInputChange} \n            inputValue={inputValue}\n            invalidInput={invalidInput} \n        />\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setDataForFetching: (owner, repo, page) => dispatch(setRequestData(owner, repo, page))\n});\n\nexport default withRouter(connect(\n    null,\n    mapDispatchToProps\n)(HeaderContainer));"]},"metadata":{},"sourceType":"module"}