{"ast":null,"code":"var _jsxFileName = \"/home/abbas/jsPractice/tasks/task-forks/github-forks-app/github-forks-app/src/pages/ResultsPage.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchForks } from '../actionCreators/forks';\nimport { setRequestData } from '../actionCreators/requestData';\nimport { withRouter } from 'react-router-dom';\nimport Pagination from '../components/Pagination';\nimport NotFoundPage from './NotFoundPage';\nimport Spinner from '../components/Spinner';\n\nconst ResultsPage = ({\n  forks,\n  fetchStatus,\n  fetchForks,\n  setRequestData,\n  history,\n  match,\n  requestData\n}) => {\n  const _match$params = match.params,\n        owner = _match$params.owner,\n        repName = _match$params.repName,\n        number = _match$params.number;\n  useEffect(() => {\n    fetchForks(owner, repName, number);\n  }, [requestData]);\n\n  const changePage = n => {\n    history.push(`/search/${owner}/${repName}/${Number(number) + n}`);\n    setRequestData(owner, repName, number + n);\n  };\n\n  if (fetchStatus.loading) return React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  });\n  if (fetchStatus.error) return React.createElement(NotFoundPage, {\n    value: `${owner}/${repName}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, forks.map(fork => {\n    return React.createElement(\"h3\", {\n      key: fork.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, fork.author.login);\n  }), React.createElement(Pagination, {\n    onNextClick: changePage.bind(this, 1),\n    onPrevClick: changePage.bind(this, -1),\n    prevDisabled: Number(number) === 1,\n    nextDisabled: forks.length < 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = ({\n  requestData,\n  forks,\n  favoriteForks,\n  fetchStatus\n}) => ({\n  requestData: requestData,\n  forks: forks,\n  favorites: favoriteForks,\n  fetchStatus: fetchStatus\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchForks: (owner, repository, page) => dispatch(fetchForks(owner, repository, page)),\n  setRequestData: (owner, repository, page) => dispatch(setRequestData(owner, repository, page))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ResultsPage));","map":{"version":3,"sources":["/home/abbas/jsPractice/tasks/task-forks/github-forks-app/github-forks-app/src/pages/ResultsPage.js"],"names":["React","useEffect","connect","fetchForks","setRequestData","withRouter","Pagination","NotFoundPage","Spinner","ResultsPage","forks","fetchStatus","history","match","requestData","params","owner","repName","number","changePage","n","push","Number","loading","error","map","fork","id","author","login","bind","length","mapStateToProps","favoriteForks","favorites","mapDispatchToProps","dispatch","repository","page"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchForks } from '../actionCreators/forks';\nimport { setRequestData } from '../actionCreators/requestData';\nimport { withRouter } from 'react-router-dom';\n\nimport Pagination from '../components/Pagination';\nimport NotFoundPage from './NotFoundPage';\nimport Spinner from '../components/Spinner';\n\nconst ResultsPage = ({\n    forks,\n    fetchStatus,\n    fetchForks,\n    setRequestData,\n    history,\n    match,\n    requestData\n}) => {\n    const { owner, repName, number } = match.params;\n\n    useEffect(()=> {\n        fetchForks(owner, repName, number);\n    }, [requestData])\n\n    const changePage = (n) => {\n        history.push(`/search/${owner}/${repName}/${Number(number) + n}`);\n        setRequestData( owner, repName, number + n );\n        \n    };\n\n    if (fetchStatus.loading) return <Spinner />\n\n    if (fetchStatus.error) return <NotFoundPage value={`${owner}/${repName}`} />\n\n    return (\n        <div>\n            {\n                forks.map(fork => {\n                    return <h3 key={fork.id}>{fork.author.login}</h3>\n                })\n            }\n            <Pagination \n                onNextClick={changePage.bind(this, 1)}\n                onPrevClick={changePage.bind(this, -1)}\n                prevDisabled={Number(number) === 1}\n                nextDisabled={forks.length < 10}\n            />\n        </div>\n    );\n};\n\nconst mapStateToProps = ({requestData, forks, favoriteForks, fetchStatus}) => ({\n    requestData: requestData,\n    forks: forks,\n    favorites: favoriteForks,\n    fetchStatus: fetchStatus\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchForks: (owner, repository, page) => dispatch(fetchForks(owner, repository, page)),\n    setRequestData: (owner, repository, page) => dispatch(setRequestData(owner, repository, page))\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ResultsPage));"]},"metadata":{},"sourceType":"module"}